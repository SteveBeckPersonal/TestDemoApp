@page "/fetchdata"
@using System.Text.Json
@using Demo_Solution.Services;
@inject ForecastService forecastService;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td><button @onclick="() => HandleRemoveAsync(forecast.Id)">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>

    <UserTable Items="@forecasts"></UserTable>

    <h3>Add Forecast</h3>
    <EditForm Model=@weatherForecast OnValidSubmit=@HandleValidSubmit>
        <div>
            <label for="Date">Date</label>
            <InputDate id="Date" @bind-Value="weatherForecast.Date" />
        </div>
        <div>
            <label for="Date">Temp (C)</label>
            <InputNumber id="Temp" @bind-Value="weatherForecast.TemperatureC" />
        </div>
        <div>
            <label for="Summary">Summary</label>
            <InputText id="Summary" @bind-Value="weatherForecast.Summary" />
        </div>
        <button type="submit">Save</button>
    </EditForm>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await forecastService.GetWeatherForecasts();
    }

    private async void HandleRemoveAsync(Guid id)
    {
        await forecastService.DeleteForecast(id);
        forecasts = await forecastService.GetWeatherForecasts();
        StateHasChanged();
    }

    private WeatherForecast weatherForecast = new WeatherForecast() { Date = DateTime.Now };

    private async void HandleValidSubmit()
    {
        await forecastService.PostWeatherForecast(weatherForecast);
        forecasts = await forecastService.GetWeatherForecasts();    
        StateHasChanged();
    }

   
}
